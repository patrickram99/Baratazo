generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  firstName      String
  lastName       String
  password       String
  phoneNumber    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         Order[]
  reviews        Review[]
  addresses      Address[]
  carts          Cart[]
  supportTickets SupportTicket[]
  Wishlist       Wishlist[]
}

model Address {
  id           Int     @id @default(autoincrement())
  country      String
  addressLine1 String
  addressLine2 String?
  state        String
  city         String
  postalCode   String
  description  String?
  isDefault    Boolean @default(false)
  userId       Int?
  user         User?   @relation(fields: [userId], references: [id])
  orders       Order[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  parentId      Int?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  products      Product[]
}

model Product {
  id             Int                @id @default(autoincrement())
  name           String
  description    String
  price          Float
  categoryId     Int
  category       Category           @relation(fields: [categoryId], references: [id])
  brand          String
  model          String
  specifications Json
  imageUrls      String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  orderItems     OrderItem[]
  reviews        Review[]
  variants       ProductVariant[]
  inventories    Inventory[]
  attributes     ProductAttribute[]
  bundleItems    BundleItem[]
  cartItems      CartItem[]
  WishlistItem   WishlistItem[]
}

model ProductVariant {
  id          Int         @id @default(autoincrement())
  productId   Int
  product     Product     @relation(fields: [productId], references: [id])
  sku         String      @unique
  name        String
  price       Float
  inventories Inventory[]
}

model ProductAttribute {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  name      String
  value     String
}

model Inventory {
  id        Int             @id @default(autoincrement())
  productId Int
  product   Product         @relation(fields: [productId], references: [id])
  variantId Int?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  location  String
}

model BundleItem {
  id        Int     @id @default(autoincrement())
  bundleId  Int
  bundle    Product @relation(fields: [bundleId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id                Int             @id @default(autoincrement())
  userId            Int?
  guestEmail        String?
  guestPhone        String?
  status            OrderStatus
  totalAmount       Float
  paymentMethod     String
  paymentStatus     PaymentStatus
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User?           @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
  shippingAddressId Int
  shippingAddress   Address         @relation(fields: [shippingAddressId], references: [id])
  paymentInfo       PaymentInfo?
  ReturnRequest     ReturnRequest[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Promotion {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  applicableProducts String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id])
  guestId   String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  variantId Int?
  quantity  Int
  price     Float
}

model PaymentInfo {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  order         Order         @relation(fields: [orderId], references: [id])
  paymentMethod String
  transactionId String?
  amount        Float
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Coupon {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  discountType  String
  discountValue Float
  minPurchase   Float?
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usageCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SupportTicket {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  subject     String
  description String
  status      TicketStatus
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  messages    TicketMessage[]
}

model TicketMessage {
  id          Int           @id @default(autoincrement())
  ticketId    Int
  ticket      SupportTicket @relation(fields: [ticketId], references: [id])
  message     String
  isFromStaff Boolean
  createdAt   DateTime      @default(now())
}

model Wishlist {
  id       Int            @id @default(autoincrement())
  userId   Int
  user     User           @relation(fields: [userId], references: [id])
  products WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())
}

model TaxRate {
  id        Int      @id @default(autoincrement())
  country   String
  state     String?
  rate      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingMethod {
  id                    Int     @id @default(autoincrement())
  name                  String
  description           String?
  price                 Float
  estimatedDeliveryDays Int?
}

model ReturnRequest {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  reason    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SEOMetadata {
  id          Int     @id @default(autoincrement())
  entityType  String
  entityId    Int
  title       String?
  description String?
  keywords    String?
}
